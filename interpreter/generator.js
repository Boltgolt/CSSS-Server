/*
 * STEP 5: Generator
 * Turns the tree of DOM objects into valid HTML and adds general tags to it
 */

module.exports = function(tree, filename) {
	// Start the HTML output with a simple header
	let outputHTML = `<!DOCTYPE html>
	<html lang="en" dir="ltr">
		<head>
			<meta charset="utf-8">
			<title>Generated by CSSS</title>
		</head>
		<body>`

	/**
	 * Run through all children of a DOM node
	 * @param  {Object} node The node to get the children from
	 * @return {String}      The resulting HTML string
	 */
	function runThrough(node) {
		let returnString = ""

		node.children.forEach(function(element) {
			returnString += run(element)
		})

		return returnString
	}

	/**
	 * Convert an element fram a DOM node to an HTML string
	 * @param  {Object} element An DOM object node
	 * @return {String}         The resulting HTML string
	 */
	function run(element) {
		// Ignore the if meta tag
		if (element.tag == "if") {
			return runThrough(element)
		}

		// Start the opening tag
		let returnString = `<${element.tag}`

		// Add all attributes to it
		for (let attribute in element.attributes) {
			returnString += ` ${attribute}="${element.attributes[attribute]}"`
		}

		// Get the amount of styles to apply
		let styles = Object.keys(element.styles).length
		// Subtract one if the content style is one of them
		if ("content" in element.styles) styles--

		// Check if there are styles that need to be insterted
		if (styles > 0) {
			// Open a style attribute
			returnString += ` style="`

			// Loop though all styles and add them to the HTML
			for (let style in element.styles) {
				// Skip the content style as we'll add that inside the element
				if (style == "content") continue;

				returnString += `${style}: ${element.styles[style]};`
			}

			// Close the attribute
			returnString += `"`
		}

		// Close the opening tag
		returnString += ">"

		// Add the content if it exists
		if (typeof element.styles.content == "string") {
			returnString += element.styles.content
		}

		// Go though all child nodes and also add them to the HTML
		returnString += runThrough(element)

		// Close the tag
		return returnString + `</${element.tag}>`
	}

	// GO though the whole DOM and add everything to the HTML
	outputHTML += runThrough(tree)

	// Add the final closing tags and return the raw strings
	return outputHTML + `	</body></html>`
}
